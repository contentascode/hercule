{"version":3,"sources":["../src/resolve-stream.js"],"names":[],"mappings":";;;;;kBA8DwB;;AA9DxB;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,SAAS,OAAT,CAAiB,cAAjB,EAAiC,UAAjC,EAA6C,YAA7C,EAA2D;AACzD,MAAM,UAAU,eAAe,OAAf,CADyC;AAEzD,MAAM,WAAW,eAAe,QAAf,CAFwC;AAGzD,MAAM,WAAW,iBAAE,IAAF,CAAO,UAAP,EAAmB,EAAE,aAAa,QAAQ,IAAR,EAAlC,CAAX,CAHmD;AAIzD,MAAM,OAAO,iBAAE,IAAF,CAAO,YAAY,QAAZ,IAAwB,OAAxB,EAAiC,CAAC,MAAD,EAAS,UAAT,CAAxC,CAAP,CAJmD;;AAMzD,MAAI,CAAC,QAAD,IAAa,KAAK,QAAL,KAAkB,mBAAW,KAAX,EAAkB;AACnD,SAAK,IAAL,GAAY,eAAK,IAAL,CAAU,YAAV,EAAwB,KAAK,IAAL,CAApC,CADmD;GAArD;;AAIA,SAAO,IAAP,CAVyD;CAA3D;;AAaA,SAAS,KAAT,CAAe,OAAf,EAAwB,YAAxB,EAAsC;;;AAGpC,MAAM,aAAa,2BAAQ,KAAR,CAAc,OAAd,CAAb;;;AAH8B,MAM9B,mBAAmB,iBAAE,GAAF,CAAM,WAAW,UAAX,EAAuB,gBAAqC;QAAlC,+BAAkC;QAArB,iBAAqB;QAAf,yBAAe;;AACzF,QAAM,eAAe,QAAC,KAAa,mBAAW,KAAX,GAAoB,eAAK,IAAL,CAAU,YAAV,EAAwB,IAAxB,CAAlC,GAAkE,IAAlE,CADoE;AAEzF,WAAO,EAAE,wBAAF,EAAe,kBAAf,EAAyB,MAAM,YAAN,EAAhC,CAFyF;GAArC,CAAhD,CAN8B;;AAWpC,SAAO,EAAE,sBAAF,EAAc,kCAAd,EAAP,CAXoC;CAAtC;;AAce,SAAS,aAAT,CAAuB,UAAvB,EAAqD;MAAlB,oEAAc,kBAAI;;AAClE,WAAS,SAAT,CAAmB,KAAnB,EAA0B,QAA1B,EAAoC,EAApC,EAAwC;AACtC,QAAM,UAAU,iBAAE,GAAF,CAAM,KAAN,EAAa,CAAC,MAAD,EAAS,MAAT,CAAb,CAAV,CADgC;AAEtC,QAAM,eAAe,iBAAE,GAAF,CAAM,KAAN,EAAa,cAAb,KAAgC,EAAhC,CAFiB;AAGtC,QAAM,aAAa,iBAAE,GAAF,CAAM,KAAN,EAAa,YAAb,KAA8B,EAA9B,CAHmB;AAItC,QAAI,mBAAJ,CAJsC;AAKtC,QAAI,yBAAJ;;;AALsC,QAQlC,CAAC,OAAD,EAAU;AACZ,WAAK,IAAL,CAAU,KAAV,EADY;AAEZ,aAAO,IAAP,CAFY;KAAd;;AAKA,QAAI;mBACkC,MAAM,OAAN,EAAe,YAAf,EADlC;;AACC,qCADD;AACa,iDADb;KAAJ,CAEE,OAAO,GAAP,EAAY;AACZ,WAAK,IAAL,CAAU,KAAV,EADY;AAEZ,WAAK,IAAL,CAAU,OAAV,EAAmB,EAAE,KAAK,0BAAL,EAAiC,MAAM,OAAN,EAAe,OAAO,GAAP,EAArE,EAFY;AAGZ,aAAO,IAAP,CAHY;KAAZ;;AAMF,QAAM,aAAa,iBAAE,IAAF,8BAAW,sCAAqB,YAAhC,CAAb,CArBgC;AAsBtC,QAAM,OAAO,QAAQ,UAAR,EAAoB,UAApB,EAAgC,YAAhC,CAAP;;;AAtBgC,eAyBtC,CAAY,IAAZ,CAAiB,KAAK,IAAL,CAAjB,CAzBsC;;AA2BtC,SAAK,IAAL,CAAU,iBAAE,MAAF,CAAS,KAAT,EAAgB,EAAE,UAAF,EAAQ,sBAAR,EAAhB,CAAV,EA3BsC;AA4BtC,WAAO,IAAP,CA5BsC;GAAxC;;AA+BA,SAAO,kBAAS,GAAT,CAAa,SAAb,CAAP,CAhCkE;CAArD","file":"resolve-stream.js","sourcesContent":["import through2 from 'through2';\nimport path from 'path';\nimport _ from 'lodash';\n\nimport grammar from './transclude-parser';\nimport { LINK_TYPES } from './config';\n\n/**\n* Input stream: (object)\n* - link (object, required)\n*   - href (string, required)\n* - relativePath (string)\n* - references (array, required)\n*   - (object)\n*     - placeholder (string, required)\n*     - href (string, required)\n*     - hrefType (enum, required)\n*     - source (string)\n*     - original (object)\n*       - line (integer, required)\n*       - column (integer, required)\n* - parents (array, required)\n*\n* Output stream: (object)\n* - link (object, required)\n*   - href (string)\n*   - hrefType (enum)\n* - relativePath (string, optional)\n* - references (array, required) - References extended with any newly parsed references.\n*   - (object) - as above\n* - parents (array, required)\n*\n* Input and output properties can be altered by providing options\n*/\n\nfunction resolve(unresolvedLink, references, relativePath) {\n  const primary = unresolvedLink.primary;\n  const fallback = unresolvedLink.fallback;\n  const override = _.find(references, { placeholder: primary.href });\n  const link = _.pick(override || fallback || primary, ['href', 'hrefType']);\n\n  if (!override && link.hrefType === LINK_TYPES.LOCAL) {\n    link.href = path.join(relativePath, link.href);\n  }\n\n  return link;\n}\n\nfunction parse(rawLink, relativePath) {\n  // Parse link body using peg.js grammar\n  // This allows complex links with placeholders, fallbacks, and overrides\n  const parsedLink = grammar.parse(rawLink);\n\n  // Make references relative\n  const parsedReferences = _.map(parsedLink.references, ({ placeholder, href, hrefType }) => {\n    const relativeHref = (hrefType === LINK_TYPES.LOCAL) ? path.join(relativePath, href) : href;\n    return { placeholder, hrefType, href: relativeHref };\n  });\n\n  return { parsedLink, parsedReferences };\n}\n\nexport default function ResolveStream(sourceFile, sourcePaths = []) {\n  function transform(chunk, encoding, cb) {\n    const rawLink = _.get(chunk, ['link', 'href']);\n    const relativePath = _.get(chunk, 'relativePath') || '';\n    const parentRefs = _.get(chunk, 'references') || [];\n    let parsedLink;\n    let parsedReferences;\n\n    // No link to parse, move along\n    if (!rawLink) {\n      this.push(chunk);\n      return cb();\n    }\n\n    try {\n      ({ parsedLink, parsedReferences } = parse(rawLink, relativePath));\n    } catch (err) {\n      this.push(chunk);\n      this.emit('error', { msg: 'Link could not be parsed', path: rawLink, error: err });\n      return cb();\n    }\n\n    const references = _.uniq([...parsedReferences, ...parentRefs]);\n    const link = resolve(parsedLink, parentRefs, relativePath);\n\n    // Add the resolved link path to the array of all source paths\n    sourcePaths.push(link.href);\n\n    this.push(_.assign(chunk, { link, references }));\n    return cb();\n  }\n\n  return through2.obj(transform);\n}\n"]}