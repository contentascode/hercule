{"version":3,"sources":["../src/transclude-stream.js"],"names":[],"mappings":";;;;;kBAqBwB;;AArBxB;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAQA,IAAM,kBAAkB;AACtB,SAAO,MAAP;AACA,UAAQ,SAAR;CAFI;;AAKS,SAAS,WAAT,CAAqB,GAArB,EAA0B,SAA1B,EAAqC;AAClD,MAAM,UAAU,iBAAE,KAAF,CAAQ,EAAR,EAAY,eAAZ,EAA6B,GAA7B,CAAV,CAD4C;AAElD,MAAM,SAAS,QAAQ,MAAR,CAFmC;;AAIlD,WAAS,KAAT,CAAe,KAAf,EAAsB;AACpB,WAAO,0BAAa,KAAb,EAAoB,OAApB,CAAP,CADoB;GAAtB;;AAIA,WAAS,SAAT,CAAmB,KAAnB,EAA0B;AACxB,WAAO,8BAAiB,KAAjB,CAAP,CADwB;GAA1B;;AAIA,MAAM,mBAAmB,EAAE,0CAAF,EAAsC,YAAtC,EAA6C,oBAA7C,EAAnB,CAZ4C;AAalD,MAAM,YAAY,qCAAgB,gBAAhB,EAAkC,QAAQ,UAAR,sBAAlC,CAAZ,CAb4C;AAclD,MAAM,WAAW,4BAAkB,MAAlB,EAA0B,SAA1B,CAAX,CAd4C;AAelD,MAAM,WAAW,4BAAkB,EAAE,YAAY,QAAQ,UAAR,EAAoB,WAAW,QAAQ,SAAR,EAA/D,EAAoF,SAApF,CAAX,CAf4C;AAgBlD,MAAM,WAAW,4BAAX,CAhB4C;AAiBlD,MAAM,YAAY,2BAAI,SAAJ,CAAZ,CAjB4C;;AAmBlD,YACC,IADD,CACM,QADN,EAEC,IAFD,CAEM,QAFN,EAGC,IAHD,CAGM,QAHN,EAIC,IAJD,CAIM,SAJN,EAnBkD;;AAyBlD,MAAM,cAAc,wBAAS,SAAT,EAAoB,SAApB,CAAd,CAzB4C;;AA2BlD,WAAS,EAAT,CAAY,OAAZ,EAAqB,UAAC,GAAD,EAAS;AAC5B,gBAAY,IAAZ,CAAiB,OAAjB,EAA0B,GAA1B,EAD4B;AAE5B,aAAS,GAAT,GAF4B;GAAT,CAArB,CA3BkD;;AAgClD,WAAS,EAAT,CAAY,OAAZ,EAAqB,UAAC,GAAD,EAAS;AAC5B,gBAAY,IAAZ,CAAiB,OAAjB,EAA0B,GAA1B,EAD4B;AAE5B,aAAS,GAAT,GAF4B;GAAT,CAArB,CAhCkD;;AAqClD,SAAO,WAAP,CArCkD;CAArC","file":"transclude-stream.js","sourcesContent":["import _ from 'lodash';\nimport duplexer from 'duplexer2';\nimport get from 'through2-get';\nimport regexpTokenizer from 'regexp-stream-tokenizer';\n\nimport ResolveStream from './resolve-stream';\nimport InflateStream from './inflate-stream';\nimport IndentStream from './indent-stream';\nimport { linkRegExp, defaultToken, defaultSeparator, WHITESPACE_GROUP } from './config';\n\n/**\n* Input stream: string\n*\n* Output stream: string\n*/\n\nconst DEFAULT_OPTIONS = {\n  input: 'link',\n  output: 'content',\n};\n\nexport default function Transcluder(opt, linkPaths) {\n  const options = _.merge({}, DEFAULT_OPTIONS, opt);\n  const source = options.source;\n\n  function token(match) {\n    return defaultToken(match, options);\n  }\n\n  function separator(match) {\n    return defaultSeparator(match);\n  }\n\n  const tokenizerOptions = { leaveBehind: `${WHITESPACE_GROUP}`, token, separator };\n  const tokenizer = regexpTokenizer(tokenizerOptions, options.linkRegExp || linkRegExp);\n  const resolver = new ResolveStream(source, linkPaths);\n  const inflater = new InflateStream({ linkRegExp: options.linkRegExp, linkMatch: options.linkMatch }, linkPaths);\n  const indenter = new IndentStream();\n  const stringify = get('content');\n\n  tokenizer\n  .pipe(resolver)\n  .pipe(inflater)\n  .pipe(indenter)\n  .pipe(stringify);\n\n  const transcluder = duplexer(tokenizer, stringify);\n\n  resolver.on('error', (err) => {\n    transcluder.emit('error', err);\n    resolver.end();\n  });\n\n  inflater.on('error', (err) => {\n    transcluder.emit('error', err);\n    inflater.end();\n  });\n\n  return transcluder;\n}\n"]}